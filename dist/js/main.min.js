const keys={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,pausebreak:19,capslock:20,esc:27,space:32,pageup:33,pagedown:34,end:35,home:36,ArrowLeft:37,ArrowUp:38,ArrowRight:39,ArrowDown:40,insert:45,delete:46,0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,a:65,b:66,c:67,d:68,e:69,f:70,g:71,h:72,i:73,j:74,k:75,l:76,m:77,n:78,o:79,p:80,q:81,r:82,s:83,t:84,u:85,v:86,w:87,x:88,y:89,z:90,leftwindowkey:91,rightwindowkey:92,selectkey:93,numpad0:96,numpad1:97,numpad2:98,numpad3:99,numpad4:100,numpad5:101,numpad6:102,numpad7:103,numpad8:104,numpad9:105,multiply:106,add:107,subtract:109,decimalpoint:110,divide:111,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123,numlock:144,scrolllock:145,semicolon:186,equalsign:187,comma:188,dash:189,period:190,forwardslash:191,graveaccent:192,openbracket:219,backslash:220,closebracket:221,singlequote:222};
var _a;class docs{static get keyListenerStatus(){return docs._keyListener}static get clickListenerStatus(){return docs._mouseListener}static get docID(){return window.location.href.split("/document/d/")[1].split("/")[0]}static get docName(){return(document.querySelector(".docs-title-input-label-inner").textContent??"").trim()??""}static get getUserCursor(){let r=null;return document.querySelectorAll(".kix-cursor").forEach(e=>{var t=e.querySelector(".kix-cursor-caret");null!==t&&(t.style.borderLeftColor.replace(/,/g,"").replace(/\s/g,"").toLowerCase(),(e.querySelector(".kix-cursor-name")?.textContent??"").trim().length<=0)&&(r=e)}),null!==r?r:document.querySelector(".kix-cursor")}static get getCursorWidth(){return docs._getCursorWidth()}static set setCursorWidth([e,t]){docs._setCursorWidth(e,t)}static get textTarget(){return async()=>(await this._waitForElm(".docs-texteventtarget-iframe")).contentDocument.activeElement}static get keyArray(){return this._listOfCommands}static get isInMotion(){return mode.isInMotion}static set isInMotion(e){mode.isInMotion=e}static pressHTMLElement(e,t="id",r=!1,s=!1){t=document.querySelector(`[${t}="${e}"]`);if(t){if(r||t.dispatchEvent(new MouseEvent("mousedown",{bubbles:!0})),r&&(t.dispatchEvent(new MouseEvent("mouseenter",{bubbles:!0})),t.dispatchEvent(new MouseEvent("mousedown",{bubbles:!0})),t.dispatchEvent(new MouseEvent("mouseup",{bubbles:!0})),t.dispatchEvent(new MouseEvent("click",{bubbles:!0})),t.dispatchEvent(new MouseEvent("mouseleave",{bubbles:!0}))),s)try{navigator.clipboard.readText().then(e=>{console.log(`"${e.trim()}"`),navigator.clipboard.writeText(e.trim()+`
`)})}catch(e){console.error(e)}return this}}static keydownInit(){return!docs._keyListener&&this._keydown()}static clickInit(){return!docs._mouseListener&&this._clickEvent()}static switchToMode(e){return mode.mode=e,this._listOfCommands=[],this.correctCursor(),this}static correctCursor(){switch(mode.mode){case"normal":this._setCursorWidth("7px",!1);break;case"insert":case"visual":this._setCursorWidth("2px",!0)}}static _waitForElm(r){return new Promise(e=>{if(document.querySelector(r))return e(document.querySelector(r));const t=new MutationObserver(()=>{document.querySelector(r)&&(e(document.querySelector(r)),t.disconnect())});t.observe(document.body,{childList:!0,subtree:!0})})}static _setCursorWidth(e,t){var r=this.getUserCursor;return null!==r&&((r=r.querySelector(".kix-cursor-caret")).style.borderWidth=e,r.style.setProperty("border-color",`rgba(${t?0:255}, 0, 0, ${t?1:.5})`,"important"),r.style.mixBlendMode="difference",!0)}static _getCursorWidth(){var e=this.getUserCursor;return null===e?"0px":(e=e.querySelector(".kix-cursor-caret"),parseInt(e.style.borderLeftWidth)+parseInt(e.style.borderRightWidth)+"px")}static _keyToArray(e){"normal"!==vim.mode&&"visual"!==vim.mode&&"visualLine"!==vim.mode||(e.preventDefault(),e.stopImmediatePropagation());var t=e.key;return"Control"!==t&&"Shift"!==t&&"Alt"!==t&&(this._listOfCommands.push(e.key),statusLine.updateKeyArray(vim.mode),checkBindings(vim.mode)),this._listOfCommands}static _keydown(){return docs.textTarget().then(e=>{e.addEventListener("keydown",e=>{this._keyToArray(e)}),this._keyListener=!0}),!0}static _clickEvent(){return document.addEventListener("click",e=>{this.correctCursor(),this._mouseListener=!0}),!0}_pasteText(e){var t=document.querySelectorAll("docs-texteventtarget-iframe")[0].contentDocument.querySelector("[contenteditable=true]"),r=new DataTransfer,e=(r.setData("text/plain",e),new ClipboardEvent("paste",{clipboardData:r,bubbles:!0,cancelable:!0}));t.dispatchEvent(e)}}(_a=docs)._listOfCommands=[],docs._keyListener=!1,docs._mouseListener=!1,docs.pressKey=(e,t,r="visual"===mode.mode||"visualLine"===mode.mode)=>{var s=document.getElementsByClassName("docs-texteventtarget-iframe")[0].contentDocument,e=new KeyboardEvent("keydown",{keyCode:e,ctrlKey:t??!1,shiftKey:r??!1});return s.dispatchEvent(e),_a.correctCursor(),_a},docs.copyText=(e=!0)=>(console.log("copying text"),docs.pressHTMLElement(":77","id",e,!1)),docs.pasteText=()=>docs.pressHTMLElement(":78","id",!0),docs.selectLine=()=>docs.pressKey(keys.home)?.pressKey(keys.end,!1,!0),docs.stopSelecting=()=>docs.pressKey(keys.arrowRight,!1,!1)?.pressKey(keys.ArrowLeft,!1,!1);
class mode extends docs{static _switchToMode(t){switch(vim.number=1,statusLine.updateStatusbar(t),statusLine.updateKeyArray(t),t){case"insert":console.log("Switching to insert mode."),vim.mode="insert",this.setCursorWidth=["2px",!0];break;case"normal":vim.mode="normal",this.setCursorWidth=["7px",!1];break;case"visual":vim.mode="visual",this.setCursorWidth=["7px",!1];break;case"visualLine":vim.mode="visualLine",this.setCursorWidth=["7px",!1]}}static get mode(){return vim.mode}static set mode(t){this._switchToMode(t)}static get number(){return vim.number}static set number(t){isNaN(t)?vim.number=1:vim.number=t}static get isInMotion(){return vim.isInMotion}static set isInMotion(t){vim.isInMotion=t}static switchToNormalMode(){return this.mode="normal",this}static switchToInsertMode(){return this.mode="insert",this}static switchToVisualMode(){return this.mode="visual",this}}

class statusLine extends docs{static async initStatusLine(){this._addClass(this._statusLineWrapper,["vim_statusbar"]),this._addClass(this._docId,["vim_statusbar_child"]),this._addClass(this._docsMode,["vim_statusbar_child"]),this._addClass(this._keystrokes,["vim_statusbar_child"]);var t=document.createElement("style");t.textContent=`
        .vim_statusbar {
            background-color: transparent;
            width: 100%;
            height: 50px;
            bottom: 10px;
            left: 7px;
            position: absolute;
            padding: 0.25rem 0.5rem;

            display: flex;
            justify-content: flex-end;
            align-items: flex-start;
            flex-direction: column;

            font-family: monospace;
            font-size: 13px;
            color: grey;
            font-weight: bold;
          }
        `,document.body.append(this._statusLineWrapper),document.body.append(t),this._statusLineWrapper.append(this._keystrokes),this._statusLineWrapper.append(this._docsMode),this._statusLineWrapper.append(this._docId),this.updateStatusbar(vim.mode),this.updateKeyArray(vim.mode),this._docId.innerHTML=""+(this.docID??"")}static updateStatusbar(t){this._docsMode.innerHTML=t?`-- ${t.toUpperCase()} --`:"-- NORMAL --"}static updateKeyArray(t){var e=this.keyArray.map(t=>"Escape"===t?"Esc":"Control"===t?"Ctrl":"ArrowLeft"===t?"←":"ArrowRight"===t?"→":"ArrowUp"===t?"↑":"ArrowDown"===t?"↓":"Backspace"===t?"⌫":"Delete"===t?"⌦":"Enter"===t?"⏎":"Tab"===t?"⇥":"Shift"===t?"⇧":"Alt"===t?"⌥":"Meta"===t?"⌘":"CapsLock"===t?"⇪":"PageUp"===t?"⇞":"PageDown"===t?"⇟":"Home"===t?"↖":"End"===t?"↘":"Insert"===t?"Ins":"ContextMenu"===t?"⌘":t).join("");this._keystrokes.innerHTML="insert"===t?"":""+(e??"")}static _addClass(t,e){t.classList.add(...e)}static _waitForElement(s){return new Promise(t=>{if(document.querySelector(s))return t(document.querySelector(s));const e=new MutationObserver(()=>{document.querySelector(s)&&(t(document.querySelector(s)),e.disconnect())});e.observe(document.body,{childList:!0,subtree:!0})})}}statusLine._statusLineWrapper=document.createElement("div"),statusLine._docId=document.createElement("div"),statusLine._docsMode=document.createElement("div"),statusLine._keystrokes=document.createElement("div");
class vim extends mode{static get mode(){return this._mode}static set mode(t){this._mode=t}static get number(){return this._number}static set number(t){this._number=t}static get isInMotion(){return this._isInMotion}static set isInMotion(t){this._isInMotion=t}static get lastCommand(){return this._lastCommand}static set lastCommand(t){this._lastCommand=t}}vim._mode="insert",vim._number=1,vim._isInMotion=!1,vim._lastCommand="";
const functionMap={k:{normal:()=>docs.pressKey(keys.ArrowUp),visual:()=>docs.pressKey(keys.ArrowUp)},j:{normal:()=>docs.pressKey(keys.ArrowDown),visual:()=>docs.pressKey(keys.ArrowDown)},l:{normal:()=>docs.pressKey(keys.ArrowRight),visual:()=>docs.pressKey(keys.ArrowRight)},h:{normal:()=>docs.pressKey(keys.ArrowLeft),visual:()=>docs.pressKey(keys.ArrowLeft)},w:{normal:()=>docs.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowLeft,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowLeft,!0)},e:{normal:()=>docs.pressKey(keys.ArrowRight,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0)},b:{normal:()=>docs.pressKey(keys.ArrowLeft,!0),visual:()=>docs.pressKey(keys.ArrowLeft,!0)},i:{normal:()=>docs.switchToInsertMode(),visual:()=>docs.switchToInsertMode()},a:{normal:()=>docs.pressKey(keys.ArrowRight)?.switchToMode(),visual:()=>docs.pressKey(keys.ArrowRight)?.switchToMode()},Escape:{normal:()=>docs.switchToNormalMode().isInMotion=!1,visual:()=>docs.switchToNormalMode().isInMotion=!1,insert:()=>docs.switchToNormalMode().isInMotion=!1},v:{normal:()=>docs.pressKey(keys.shift)?.switchToVisualMode()},x:{normal:()=>docs.pressKey(keys.delete,!1,!1),visual:()=>docs.pressKey(keys.delete,!1,!1)},u:{normal:()=>docs.pressKey(keys.z,!0),visual:()=>docs.pressKey(keys.z,!0)}};

const motionsCommandMap={diw:()=>{docs.pressKey(keys.ArrowLeft,!0,!1)?.pressKey(keys.ArrowRight,!0,!0)?.pressKey(keys.delete,!1,!1)},ciw:()=>docs.pressKey(keys.ArrowLeft,!0,!1)?.pressKey(keys.ArrowRight,!0,!0)?.pressKey(keys.delete,!1,!1)?.switchToMode("insert"),gg:()=>docs.pressKey(keys.home,!0,!1),dd:()=>docs.pressKey(keys.home)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.copyText(!0)?.pressKey(keys.delete),cc:()=>docs.pressKey(keys.home)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.copyText(!0)?.pressKey(keys.delete)?.switchToMode("insert"),cw:()=>docs.pressKey(keys.ArrowRight,!0,!0)?.pressKey(keys.delete,!1,!1)?.copyText()?.switchToMode("insert"),dw:()=>{docs.pressKey(keys.ArrowRight,!0,!0)?.copyText()?.pressKey(keys.delete,!1,!1)},yy:()=>docs.pressKey(keys.home)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.copyText()?.stopSelecting(),yiw:()=>docs.pressKey(keys.ArrowLeft,!0,!1)?.pressKey(keys.ArrowRight,!0,!0)?.copyText()?.stopSelecting(),yw:()=>docs.pressKey(keys.ArrowRight,!0,!0)?.copyText()?.stopSelecting(),dj:()=>docs.pressKey(keys.home)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.pressKey(keys.ArrowDown,!0,!0)?.pressKey(keys.ArrowDown,!0,!0)?.copyText()?.pressKey(keys.delete),dk:()=>docs.pressKey(keys.ArrowDown,!0,!1)?.pressKey(keys.ArrowUp,!0,!0)?.pressKey(keys.ArrowUp,!0,!0)?.copyText()?.pressKey(keys.delete)};
const clearArray=o=>{for(;o.length;)o.pop()},fancyLogError=o=>{console.log.apply(console,["%c"+o,"font-weight: bold; color: red"])},fancyLogSuccess=o=>{console.log.apply(console,["%c"+o,"font-weight: bold; color: #bada55"])};
docs.keyListenerStatus||docs.keydownInit(),docs.clickListenerStatus||docs.clickInit();const checkBindings=(s,o)=>{const a=docs.keyArray;var e=a.some(o=>!keysThatAreUsed.includes(o.toString()));if((()=>{var o,e,r,n,i=!isNaN(mode.number)&&mode.number<50?mode.number:1;for([o,e]of Object.entries(commandMap))for(const t of Object.entries(e))if(t[0].includes(s)&&a.includes(o)&&("Escape"===o||!mode.isInMotion)){if("visualLine"===s){for(let o=0;o<i;o++)console.log("Visual Line Mode"),t[1]();return!mode.isInMotion&&isNaN(parseInt(o))&&clearArray(a)}for(let o=0;o<i;o++)t[1]();!mode.isInMotion&&isNaN(parseInt(o))&&clearArray(a)}for([r,n]of Object.entries(motionsCommandMap))if(mode.isInMotion){if(a.join("").replace(/,/g,"").includes(r)){for(let o=0;o<i;o++)n();clearArray(a),mode.isInMotion=!1}4<=a.length&&(clearArray(a),mode.isInMotion=!1)}})(),"normal"===s&&e)fancyLogError("Not a valid key"),clearArray(a);else{let e="";console.log("keyArray",a);for(let o=0;o<a.length;o++)a[o].toString().match(/[0-9]/g)&&(e+=parseInt(a[o].toString()),console.log("Number is now",e));isNaN(parseInt(e))?mode.number=1:mode.number=parseInt(e)}};
const keysThatAreUsed=["i","I","a","A","o","O","v","V","Escape","h","j","k","l","w","W","e","E","b","B","0","$","g","G","H","M","L","f","F","t","T","r","R","x","X","s","S","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Backspace","Space","Control","Shift","Alt","$","0","1","2","3","4","5","6","7","8","9","^","Home","End","d","D","c","C","y","Y","p","P"];
const commandMap={$:{normal:()=>docs.pressKey(keys.end),visual:()=>docs.pressKey(keys.end)},0:{normal:()=>{(isNaN(mode.number)||1===mode.number&&0!==docs.keyArray.length)&&docs.pressKey(keys.home)},visual:()=>docs.pressKey(keys.home)},Backspace:{normal:()=>docs.pressKey(keys.ArrowLeft),visual:()=>docs.pressKey(keys.ArrowLeft),visualLine:()=>docs.pressKey(keys.ArrowLeft)},Space:{normal:()=>docs.pressKey(keys.ArrowRight),visual:()=>docs.pressKey(keys.ArrowRight),visualLine:()=>docs.pressKey(keys.ArrowRight)},D:{normal:()=>docs?.pressKey(keys.end,!1,!0)?.pressKey(keys.delete)},C:{normal:()=>docs?.pressKey(keys.end,!1,!0)?.pressKey(keys.delete)?.switchToMode("insert")},Escape:{normal:()=>docs.switchToMode("normal").isInMotion=!1,visual:()=>docs.switchToMode("normal").pressKey(keys.ArrowLeft).isInMotion=!1,insert:()=>docs.switchToMode("normal").isInMotion=!1,visualLine:()=>docs.switchToMode("normal").isInMotion=!1},G:{normal:()=>docs.pressKey(keys.end,!0),visual:()=>docs.pressKey(keys.end,!0),visualLine:()=>docs.pressKey(keys.end,!0)},O:{normal:()=>docs.pressKey(keys.end)?.pressKey(keys.ArrowUp)?.pressKey(keys.enter)?.switchToMode("insert")},V:{normal:()=>docs.pressKey(keys.home)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.switchToMode("visualLine")},"^":{normal:()=>docs.pressKey(keys.home),visual:()=>docs.pressKey(keys.home),visualLine:()=>docs.pressKey(keys.home)},a:{normal:()=>docs.pressKey(keys.ArrowRight)?.switchToMode("insert")},b:{normal:()=>docs.pressKey(keys.ArrowLeft,!0),visual:()=>docs.pressKey(keys.ArrowLeft,!0)},c:{normal:()=>mode.isInMotion=!0,visual:()=>docs.pressKey(keys.delete,!1,!1)?.switchToMode("insert")},d:{normal:()=>mode.isInMotion=!0,visual:()=>docs.pressKey(keys.delete,!1,!1)?.switchToMode("normal"),visualLine:()=>(console.log("d"),docs.pressKey(keys.delete,!1,!1)?.switchToMode("normal"))},e:{normal:()=>docs.pressKey(keys.ArrowRight,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0)},g:{normal:()=>mode.isInMotion=!0,visual:()=>mode.isInMotion=!0},h:{normal:()=>docs.pressKey(keys.ArrowLeft),visual:()=>docs.pressKey(keys.ArrowLeft),visualLine:()=>docs.pressKey(keys.ArrowLeft,!1,!0)?.selectLine()},i:{normal:()=>docs.switchToMode("insert")},I:{normal:()=>docs.pressKey(keys.home)?.switchToMode("insert")},A:{normal:()=>docs.pressKey(keys.end)?.switchToMode("insert")},j:{normal:()=>docs.pressKey(keys.ArrowDown),visual:()=>docs.pressKey(keys.ArrowDown),visualLine:()=>docs.pressKey(keys.ArrowDown,!1,!0)?.selectLine()},k:{normal:()=>docs.pressKey(keys.ArrowUp),visual:()=>docs.pressKey(keys.ArrowUp),visualLine:()=>docs.pressKey(keys.ArrowUp,!1,!0)?.selectLine()},l:{normal:()=>docs.pressKey(keys.ArrowRight),visual:()=>docs.pressKey(keys.ArrowRight),visualLine:()=>docs.pressKey(keys.ArrowRight,!1,!0)?.selectLine()},o:{normal:()=>docs.pressKey(keys.end)?.pressKey(keys.enter)?.switchToMode("insert")},p:{normal:()=>{docs.pasteText()}},P:{normal:()=>{docs.pressKey(keys.ArrowLeft,!1,!1)?.pasteText()}},u:{normal:()=>docs.pressKey(keys.z,!0)?.switchToMode("normal").pressKey(keys.ArrowRight),visual:()=>docs.pressKey(keys.z,!0)?.switchToMode("normal").pressKey(keys.ArrowRight)},v:{normal:()=>docs.pressKey(keys.shift)?.switchToMode("visual")},w:{normal:()=>docs.pressKey(keys.ArrowRight,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0),visualLine:()=>docs.pressKey(keys.ArrowRight,!0)?.selectLine()},x:{normal:()=>docs.pressKey(keys.ArrowRight,!1,!0)?.copyText()?.pressKey(keys.backspace),visual:()=>docs.copyText()?.pressKey(keys.delete,!1,!1),visualLine:()=>docs.copyText()?.pressKey(keys.delete,!1,!1)},y:{normal:()=>mode.isInMotion=!0,visual:()=>docs.copyText()?.stopSelecting()?.switchToMode("normal"),visualLine:()=>docs.copyText()?.stopSelecting()?.switchToMode("normal")}};

statusLine.initStatusLine();