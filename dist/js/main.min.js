const keys={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,pausebreak:19,capslock:20,esc:27,space:32,pageup:33,pagedown:34,end:35,home:36,ArrowLeft:37,ArrowUp:38,ArrowRight:39,ArrowDown:40,insert:45,delete:46,0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,a:65,b:66,c:67,d:68,e:69,f:70,g:71,h:72,i:73,j:74,k:75,l:76,m:77,n:78,o:79,p:80,q:81,r:82,s:83,t:84,u:85,v:86,w:87,x:88,y:89,z:90,leftwindowkey:91,rightwindowkey:92,selectkey:93,numpad0:96,numpad1:97,numpad2:98,numpad3:99,numpad4:100,numpad5:101,numpad6:102,numpad7:103,numpad8:104,numpad9:105,multiply:106,add:107,subtract:109,decimalpoint:110,divide:111,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123,numlock:144,scrolllock:145,semicolon:186,equalsign:187,comma:188,dash:189,period:190,forwardslash:191,graveaccent:192,openbracket:219,backslash:220,closebracket:221,singlequote:222};
var _a;class docs{static get keyListenerStatus(){return docs._hasEventListenerBeenAdded}static get docID(){return window.location.href.split("/document/d/")[1].split("/")[0]}static get docName(){return(document.querySelector(".docs-title-input-label-inner").textContent??"").trim()??""}static get getUserCursor(){let r=null;return document.querySelectorAll(".kix-cursor").forEach(e=>{var t=e.querySelector(".kix-cursor-caret");null!==t&&(t.style.borderLeftColor.replace(/,/g,"").replace(/\s/g,"").toLowerCase(),(e.querySelector(".kix-cursor-name")?.textContent??"").trim().length<=0)&&(r=e)}),null!==r?r:document.querySelector(".kix-cursor")}static get getCursorWidth(){return docs._getCursorWidth()}static set setCursorWidth([e,t]){docs._setCursorWidth(e,t)}static get textTarget(){return document.querySelector(".docs-texteventtarget-iframe").contentDocument.activeElement}static get keyArray(){return this._listOfCommands}static get isInMotion(){return mode.isInMotion}static set isInMotion(e){mode.isInMotion=e}static keydownInit(){return!docs._hasEventListenerBeenAdded&&this._keydown()}static switchToNormalMode(){return mode.mode="normal",this._listOfCommands=[],this}static switchToInsertMode(){return mode.mode="insert",this._listOfCommands=[],this}static switchToVisualMode(){return mode.mode="visual",this._listOfCommands=[],this}static _setCursorWidth(e,t){var r=this.getUserCursor;return null!==r&&((r=r.querySelector(".kix-cursor-caret")).style.borderWidth=e,r.style.borderColor=`rgba(
      ${t?0:255}, 0, 0, ${t?1:.5})`,r.style.mixBlendMode="difference",!0)}static _getCursorWidth(){var e=this.getUserCursor;return null===e?"0px":(e=e.querySelector(".kix-cursor-caret"),parseInt(e.style.borderLeftWidth)+parseInt(e.style.borderRightWidth)+"px")}static _keyToArray(e){return"normal"!==vim.mode&&"visual"!==vim.mode||(e.preventDefault(),e.stopImmediatePropagation()),this._listOfCommands.push(e.key),checkBindings(vim.mode),this._listOfCommands}static _keydown(){return docs.textTarget.addEventListener("keydown",e=>{this._keyToArray(e)}),this._hasEventListenerBeenAdded=!0}_pasteText(e){var t=document.querySelectorAll("docs-texteventtarget-iframe")[0].contentDocument.querySelector("[contenteditable=true]"),r=new DataTransfer,e=(r.setData("text/plain",e),new ClipboardEvent("paste",{clipboardData:r,bubbles:!0,cancelable:!0}));t.dispatchEvent(e)}}(_a=docs)._listOfCommands=[],docs._hasEventListenerBeenAdded=!1,docs.pressKey=(e,t,r="visual"===mode.mode)=>{var s=document.getElementsByClassName("docs-texteventtarget-iframe")[0].contentDocument;if(null!==s)return e=new KeyboardEvent("keydown",{keyCode:e,ctrlKey:t??!1,shiftKey:r??!1}),s.dispatchEvent(e),_a};
class mode extends docs{static _switchToMode(t){switch(vim.number=1,statusLine.updateStatusbar(t),console.log("switching to mode: ",t),t){case"insert":vim.mode="insert",this.setCursorWidth=["2px",!0];break;case"normal":vim.mode="normal",this.setCursorWidth=["7px",!1];break;case"visual":vim.mode="visual",this.setCursorWidth=["7px",!1]}}static get mode(){return vim.mode}static set mode(t){console.log("In the setter",t),this._switchToMode(t)}static get isInMotion(){return vim.isInMotion}static set isInMotion(t){vim.isInMotion=t}static switchToNormalMode(){return this.mode="normal",this}static switchToInsertMode(){return this.mode="insert",this}static switchToVisualMode(){return this.mode="visual",this}}

class statusLine extends docs{static async initStatusLine(){await this._waitForElement(".navigation-widget-content");this._statusLine.classList.add("vim_statusbar");var t=document.createElement("style");t.textContent=`
        .vim_statusbar {
            background-color: transparent;
            width: 100%;
            height: 50px;
            position: absolute;
            bottom: 7px;
            left: 7px;
            display: flex;
            justify-content: flex-start;
            align-items: flex-end;
            font-size: 13px;
            color: black;
            font-weight: bold;
        `,document.body.append(this._statusLine),document.body.append(t),this.updateStatusbar(vim.mode)}static updateStatusbar(t){this._statusLine.innerHTML=`-- ${t} --`}static _waitForElement(n){return new Promise(e=>{if(document.querySelector(n))return e(document.querySelector(n));const s=new MutationObserver(t=>{document.querySelector(n)&&(e(document.querySelector(n)),s.disconnect())});s.observe(document.body,{childList:!0,subtree:!0})})}}statusLine._statusLine=document.createElement("div");
class vim extends mode{static get mode(){return this._mode}static set mode(t){this._mode=t}static get number(){return this._number}static set number(t){this._number=t}static get isInMotion(){return this._isInMotion}static set isInMotion(t){this._isInMotion=t}}vim._mode="insert",vim._number=1,vim._isInMotion=!1;
const functionMap={k:{normal:()=>docs.pressKey(keys.ArrowUp),visual:()=>docs.pressKey(keys.ArrowUp)},j:{normal:()=>docs.pressKey(keys.ArrowDown),visual:()=>docs.pressKey(keys.ArrowDown)},l:{normal:()=>docs.pressKey(keys.ArrowRight),visual:()=>docs.pressKey(keys.ArrowRight)},h:{normal:()=>docs.pressKey(keys.ArrowLeft),visual:()=>docs.pressKey(keys.ArrowLeft)},w:{normal:()=>docs.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowLeft,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowLeft,!0)},e:{normal:()=>docs.pressKey(keys.ArrowRight,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0)},b:{normal:()=>docs.pressKey(keys.ArrowLeft,!0),visual:()=>docs.pressKey(keys.ArrowLeft,!0)},i:{normal:()=>docs.switchToInsertMode(),visual:()=>docs.switchToInsertMode()},a:{normal:()=>docs.pressKey(keys.ArrowRight)?.switchToInsertMode(),visual:()=>docs.pressKey(keys.ArrowRight)?.switchToInsertMode()},Escape:{normal:()=>docs.switchToNormalMode().isInMotion=!1,visual:()=>docs.switchToNormalMode().isInMotion=!1,insert:()=>docs.switchToNormalMode().isInMotion=!1},v:{normal:()=>docs.pressKey(keys.shift)?.switchToVisualMode()},x:{normal:()=>docs.pressKey(keys.delete,!1,!1),visual:()=>docs.pressKey(keys.delete,!1,!1)},u:{normal:()=>docs.pressKey(keys.z,!0),visual:()=>docs.pressKey(keys.z,!0)}};

const motionsCommandMap={diw:()=>{docs.pressKey(keys.ArrowLeft,!0,!1)?.pressKey(keys.ArrowRight,!0,!0)?.pressKey(keys.delete,!1,!1)},ciw:()=>docs.pressKey(keys.ArrowLeft,!0,!1)?.pressKey(keys.ArrowRight,!0,!0)?.pressKey(keys.delete,!1,!1)?.switchToInsertMode(),gg:()=>docs.pressKey(keys.home,!0,!1)};
const clearArray=o=>{for(;o.length;)o.pop()},fancyLogError=o=>{console.log.apply(console,["%c"+o,"font-weight: bold; color: red"])},fancyLogSuccess=o=>{console.log.apply(console,["%c"+o,"font-weight: bold; color: #bada55"])};
!1===docs.keyListenerStatus&&docs.keydownInit();const checkBindings=o=>{const e=docs.keyArray;var n,r,m,a,s=e.some(o=>!keysThatAreUsed.includes(o.toString()));for([n,r]of Object.entries(commandMap))for(const i of Object.entries(r))i[0]!==o||!e.includes(n)||"Escape"!==n&&!1!==mode.isInMotion||(i[1](),console.log("Clearing the array",mode.isInMotion),!1===mode.isInMotion&&clearArray(e));for([m,a]of Object.entries(motionsCommandMap))!0===mode.isInMotion&&(console.log("I'm in motion",e,a),e.join("").replace(/,/g,"")===m)&&(console.log("I am in motion and I have a match"),a(),clearArray(e),mode.isInMotion=!1);"normal"===o&&(e.includes("v")&&(fancyLogSuccess("Starting visual mode"),mode.mode="visual"),s)&&(fancyLogError("Not a valid key"),clearArray(e))};
const keysThatAreUsed=["i","I","a","A","o","O","v","V","Escape","h","j","k","l","w","W","e","E","b","B","0","$","g","G","H","M","L","f","F","t","T","r","R","x","X","s","S","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Backspace","Space","$","0","^","Home","End","d","D","c","C"];
const commandMap={k:{normal:()=>docs.pressKey(keys.ArrowUp),visual:()=>docs.pressKey(keys.ArrowUp)},j:{normal:()=>docs.pressKey(keys.ArrowDown),visual:()=>docs.pressKey(keys.ArrowDown)},l:{normal:()=>docs.pressKey(keys.ArrowRight),visual:()=>docs.pressKey(keys.ArrowRight)},h:{normal:()=>docs.pressKey(keys.ArrowLeft),visual:()=>docs.pressKey(keys.ArrowLeft)},w:{normal:()=>docs.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowLeft,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowLeft,!0)},e:{normal:()=>docs.pressKey(keys.ArrowRight,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0)},b:{normal:()=>docs.pressKey(keys.ArrowLeft,!0),visual:()=>docs.pressKey(keys.ArrowLeft,!0)},i:{normal:()=>docs.switchToInsertMode(),visual:()=>docs.switchToInsertMode()},a:{normal:()=>docs.pressKey(keys.ArrowRight)?.switchToInsertMode(),visual:()=>docs.pressKey(keys.ArrowRight)?.switchToInsertMode()},Escape:{normal:()=>docs.switchToNormalMode().isInMotion=!1,visual:()=>docs.switchToNormalMode().isInMotion=!1,insert:()=>docs.switchToNormalMode().isInMotion=!1},v:{normal:()=>docs.pressKey(keys.shift)?.switchToVisualMode()},x:{normal:()=>docs.pressKey(keys.delete,!1,!1),visual:()=>docs.pressKey(keys.delete,!1,!1)},u:{normal:()=>docs.pressKey(keys.z,!0)?.switchToInsertMode(),visual:()=>docs.pressKey(keys.z,!0)?.switchToInsertMode()},d:{normal:()=>mode.isInMotion=!0,visual:()=>{docs.pressKey(keys.delete,!1,!1),docs.switchToNormalMode()}},c:{normal:()=>mode.isInMotion=!0,visual:()=>{docs.pressKey(keys.delete,!1,!1),docs.switchToNormalMode()}},$:{normal:()=>docs.pressKey(keys.end),visual:()=>docs.pressKey(keys.end)},0:{normal:()=>docs.pressKey(keys.home),visual:()=>docs.pressKey(keys.home)},"^":{normal:()=>docs.pressKey(keys.home),visual:()=>docs.pressKey(keys.home)},g:{normal:()=>mode.isInMotion=!0,visual:()=>mode.isInMotion=!0},G:{normal:()=>docs.pressKey(keys.end,!0),visual:()=>docs.pressKey(keys.end,!0)}};
statusLine.initStatusLine();
