const keys={backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,pausebreak:19,capslock:20,esc:27,space:32,pageup:33,pagedown:34,end:35,home:36,ArrowLeft:37,ArrowUp:38,ArrowRight:39,ArrowDown:40,insert:45,delete:46,0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,a:65,b:66,c:67,d:68,e:69,f:70,g:71,h:72,i:73,j:74,k:75,l:76,m:77,n:78,o:79,p:80,q:81,r:82,s:83,t:84,u:85,v:86,w:87,x:88,y:89,z:90,leftwindowkey:91,rightwindowkey:92,selectkey:93,numpad0:96,numpad1:97,numpad2:98,numpad3:99,numpad4:100,numpad5:101,numpad6:102,numpad7:103,numpad8:104,numpad9:105,multiply:106,add:107,subtract:109,decimalpoint:110,divide:111,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123,numlock:144,scrolllock:145,semicolon:186,equalsign:187,comma:188,dash:189,period:190,forwardslash:191,graveaccent:192,openbracket:219,backslash:220,closebracket:221,singlequote:222};
var _a;class docs{static get keyListenerStatus(){return docs._hasEventListenerBeenAdded}static get docID(){return window.location.href.split("/document/d/")[1].split("/")[0]}static get docName(){return(document.querySelector(".docs-title-input-label-inner").textContent??"").trim()??""}static get getUserCursor(){let s=null;return document.querySelectorAll(".kix-cursor").forEach(e=>{var t=e.querySelector(".kix-cursor-caret");null!==t&&(t.style.borderLeftColor.replace(/,/g,"").replace(/\s/g,"").toLowerCase(),(e.querySelector(".kix-cursor-name")?.textContent??"").trim().length<=0)&&(s=e)}),null!==s?s:document.querySelector(".kix-cursor")}static get getCursorWidth(){return docs._getCursorWidth()}static set setCursorWidth([e,t]){docs._setCursorWidth(e,t)}static get textTarget(){return document.querySelector(".docs-texteventtarget-iframe").contentDocument.activeElement}static get keyArray(){return this._listOfCommands}static get isInMotion(){return mode.isInMotion}static set isInMotion(e){mode.isInMotion=e}static pressHTMLElement(e,t="id",s=!1){t=document.querySelector(`[${t}="${e}"]`);if(t)return s||t.dispatchEvent(new MouseEvent("mousedown",{bubbles:!0})),s&&(console.log("clicking menu item"),t.dispatchEvent(new MouseEvent("mouseenter",{bubbles:!0})),t.dispatchEvent(new MouseEvent("mousedown",{bubbles:!0})),t.dispatchEvent(new MouseEvent("mouseup",{bubbles:!0})),t.dispatchEvent(new MouseEvent("click",{bubbles:!0})),t.dispatchEvent(new MouseEvent("mouseleave",{bubbles:!0}))),this}static keydownInit(){return!docs._hasEventListenerBeenAdded&&this._keydown()}static switchToMode(e){return mode.mode=e,this._listOfCommands=[],this.correctCursor(),this}static correctCursor(){switch(mode.mode){case"normal":this._setCursorWidth("7px",!1);break;case"insert":case"visual":this._setCursorWidth("2px",!0)}}static _setCursorWidth(e,t){var s=this.getUserCursor;return null!==s&&((s=s.querySelector(".kix-cursor-caret")).style.borderWidth=e,s.style.setProperty("border-color",`rgba(${t?0:255}, 0, 0, ${t?1:.5})`,"important"),s.style.mixBlendMode="difference",!0)}static _getCursorWidth(){var e=this.getUserCursor;return null===e?"0px":(e=e.querySelector(".kix-cursor-caret"),parseInt(e.style.borderLeftWidth)+parseInt(e.style.borderRightWidth)+"px")}static _keyToArray(e){"normal"!==vim.mode&&"visual"!==vim.mode&&"visualLine"!==vim.mode||(e.preventDefault(),e.stopImmediatePropagation());var t=e.key;return"Control"!==t&&"Shift"!==t&&"Alt"!==t&&(this._listOfCommands.push(e.key),checkBindings(vim.mode)),this._listOfCommands}static _keydown(){return docs.textTarget.addEventListener("keydown",e=>{this._keyToArray(e)}),this._hasEventListenerBeenAdded=!0}_pasteText(e){var t=document.querySelectorAll("docs-texteventtarget-iframe")[0].contentDocument.querySelector("[contenteditable=true]"),s=new DataTransfer,e=(s.setData("text/plain",e),new ClipboardEvent("paste",{clipboardData:s,bubbles:!0,cancelable:!0}));t.dispatchEvent(e)}}(_a=docs)._listOfCommands=[],docs._hasEventListenerBeenAdded=!1,docs.pressKey=(e,t,s="visual"===mode.mode||"visualLine"===mode.mode)=>{var r=document.getElementsByClassName("docs-texteventtarget-iframe")[0].contentDocument;if(null!==r)return e=new KeyboardEvent("keydown",{keyCode:e,ctrlKey:t??!1,shiftKey:s??!1}),r.dispatchEvent(e),_a.correctCursor(),_a},docs.copyText=()=>docs.pressHTMLElement(":77","id",!0),docs.pasteText=()=>docs.pressHTMLElement(":78","id",!0),docs.selectLine=()=>docs.pressKey(keys.home)?.pressKey(keys.end,!1,!0),docs.stopSelecting=()=>docs.pressKey(keys.arrowRight,!1,!1)?.pressKey(keys.ArrowLeft,!1,!1);
class mode extends docs{static _switchToMode(t){switch(vim.number=1,statusLine.updateStatusbar(t),t){case"insert":console.log("Switching to insert mode."),vim.mode="insert",this.setCursorWidth=["2px",!0];break;case"normal":vim.mode="normal",this.setCursorWidth=["7px",!1];break;case"visual":vim.mode="visual",this.setCursorWidth=["7px",!1];break;case"visualLine":vim.mode="visualLine",this.setCursorWidth=["7px",!1]}}static get mode(){return vim.mode}static set mode(t){this._switchToMode(t)}static get number(){return vim.number}static set number(t){isNaN(t)?vim.number=1:vim.number=t}static get isInMotion(){return vim.isInMotion}static set isInMotion(t){vim.isInMotion=t}static switchToNormalMode(){return this.mode="normal",this}static switchToInsertMode(){return this.mode="insert",this}static switchToVisualMode(){return this.mode="visual",this}}

class statusLine extends docs{static async initStatusLine(){this._addClass(this._statusLine,"vim_statusbar"),this._addClass(this._docId,"vim_statusbar"),this._addClass(this._docName,"vim_statusbar"),this._addClass(this._docId,"vim_docId"),this._addClass(this._docName,"vim_docName");var t=document.createElement("style");t.textContent=`
        .vim_statusbar {
            background-color: transparent;
            width: 100%;
            height: 50px;
            position: absolute;
            bottom: 10px;
            left: 7px;
            display: flex;
            justify-content: flex-start;
            align-items: flex-end;
            font-size: 13px;
            color: black;
            font-weight: bold;
          }
          .vim_docId {
            font-size: 11px;
            bottom: 25px;
            right: 7px;
          }
        `,document.body.append(this._statusLine),document.body.append(this._docId),document.body.append(t),this.updateStatusbar(vim.mode),this._docId.innerHTML=""+(this.docID??this.docName??"")}static updateStatusbar(t){this._statusLine.innerHTML=`-- ${t} --`}static _addClass(t,e){t.classList.add(e)}static _waitForElement(s){return new Promise(t=>{if(document.querySelector(s))return t(document.querySelector(s));const e=new MutationObserver(()=>{document.querySelector(s)&&(t(document.querySelector(s)),e.disconnect())});e.observe(document.body,{childList:!0,subtree:!0})})}}statusLine._statusLine=document.createElement("div"),statusLine._docId=document.createElement("div"),statusLine._docName=document.createElement("div");
class vim extends mode{static get mode(){return this._mode}static set mode(t){this._mode=t}static get number(){return this._number}static set number(t){this._number=t}static get isInMotion(){return this._isInMotion}static set isInMotion(t){this._isInMotion=t}static get lastCommand(){return this._lastCommand}static set lastCommand(t){this._lastCommand=t}}vim._mode="insert",vim._number=1,vim._isInMotion=!1,vim._lastCommand="";
const functionMap={k:{normal:()=>docs.pressKey(keys.ArrowUp),visual:()=>docs.pressKey(keys.ArrowUp)},j:{normal:()=>docs.pressKey(keys.ArrowDown),visual:()=>docs.pressKey(keys.ArrowDown)},l:{normal:()=>docs.pressKey(keys.ArrowRight),visual:()=>docs.pressKey(keys.ArrowRight)},h:{normal:()=>docs.pressKey(keys.ArrowLeft),visual:()=>docs.pressKey(keys.ArrowLeft)},w:{normal:()=>docs.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowLeft,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowRight,!0)?.pressKey(keys.ArrowLeft,!0)},e:{normal:()=>docs.pressKey(keys.ArrowRight,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0)},b:{normal:()=>docs.pressKey(keys.ArrowLeft,!0),visual:()=>docs.pressKey(keys.ArrowLeft,!0)},i:{normal:()=>docs.switchToInsertMode(),visual:()=>docs.switchToInsertMode()},a:{normal:()=>docs.pressKey(keys.ArrowRight)?.switchToMode(),visual:()=>docs.pressKey(keys.ArrowRight)?.switchToMode()},Escape:{normal:()=>docs.switchToNormalMode().isInMotion=!1,visual:()=>docs.switchToNormalMode().isInMotion=!1,insert:()=>docs.switchToNormalMode().isInMotion=!1},v:{normal:()=>docs.pressKey(keys.shift)?.switchToVisualMode()},x:{normal:()=>docs.pressKey(keys.delete,!1,!1),visual:()=>docs.pressKey(keys.delete,!1,!1)},u:{normal:()=>docs.pressKey(keys.z,!0),visual:()=>docs.pressKey(keys.z,!0)}};

const motionsCommandMap={diw:()=>{docs.pressKey(keys.ArrowLeft,!0,!1)?.pressKey(keys.ArrowRight,!0,!0)?.pressKey(keys.delete,!1,!1)},ciw:()=>docs.pressKey(keys.ArrowLeft,!0,!1)?.pressKey(keys.ArrowRight,!0,!0)?.pressKey(keys.delete,!1,!1)?.switchToMode("insert"),gg:()=>docs.pressKey(keys.home,!0,!1),dd:()=>docs.pressKey(keys.home)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.pressKey(keys.delete),cw:()=>docs.pressKey(keys.ArrowRight,!0,!0)?.pressKey(keys.delete,!1,!1)?.switchToMode("insert"),dw:()=>{docs.pressKey(keys.ArrowRight,!0,!0)?.pressKey(keys.delete,!1,!1)},yy:()=>docs.pressKey(keys.home)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.copyText()?.stopSelecting(),yiw:()=>docs.pressKey(keys.ArrowLeft,!0,!1)?.pressKey(keys.ArrowRight,!0,!0)?.copyText()?.stopSelecting(),yw:()=>docs.pressKey(keys.ArrowRight,!0,!0)?.copyText()?.stopSelecting(),dj:()=>docs.pressKey(keys.home)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.pressKey(keys.delete)?.pressKey(keys.backspace)?.pressKey(keys.ArrowDown,!0)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.pressKey(keys.delete)?.pressKey(keys.backspace)?.pressKey(keys.home),dk:()=>docs.pressKey(keys.home)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.pressKey(keys.delete)?.pressKey(keys.backspace)?.pressKey(keys.ArrowUp,!0)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.pressKey(keys.delete)?.pressKey(keys.backspace)?.pressKey(keys.home)};
const clearArray=o=>{for(;o.length;)o.pop()},fancyLogError=o=>{console.log.apply(console,["%c"+o,"font-weight: bold; color: red"])},fancyLogSuccess=o=>{console.log.apply(console,["%c"+o,"font-weight: bold; color: #bada55"])};
docs.keyListenerStatus||docs.keydownInit();const checkBindings=(i,o)=>{const m=docs.keyArray;var e=m.some(o=>!keysThatAreUsed.includes(o.toString()));if((()=>{var o,e,r,n,s=!isNaN(mode.number)&&mode.number<50?mode.number:1;for([o,e]of Object.entries(commandMap))for(const t of Object.entries(e))if(t[0].includes(i)&&m.includes(o)&&("Escape"===o||!mode.isInMotion)){if("visualLine"===i){for(let o=0;o<s;o++)console.log("Visual Line Mode"),t[1]();return!mode.isInMotion&&isNaN(parseInt(o))&&clearArray(m)}for(let o=0;o<s;o++)t[1]();!mode.isInMotion&&isNaN(parseInt(o))&&clearArray(m)}for([r,n]of Object.entries(motionsCommandMap))if(mode.isInMotion&&m.join("").replace(/,/g,"").includes(r)){for(let o=0;o<s;o++)n();clearArray(m),mode.isInMotion=!1}})(),"normal"===i&&e)fancyLogError("Not a valid key"),clearArray(m);else{let e="";console.log("keyArray",m);for(let o=0;o<m.length;o++)m[o].toString().match(/[0-9]/g)&&(e+=parseInt(m[o].toString()),console.log("Number is now",e));isNaN(parseInt(e))?mode.number=1:mode.number=parseInt(e)}};
const keysThatAreUsed=["i","I","a","A","o","O","v","V","Escape","h","j","k","l","w","W","e","E","b","B","0","$","g","G","H","M","L","f","F","t","T","r","R","x","X","s","S","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Backspace","Space","Control","Shift","Alt","$","0","1","2","3","4","5","6","7","8","9","^","Home","End","d","D","c","C","y","Y","p","P"];
const commandMap={Escape:{normal:()=>docs.switchToMode("normal").isInMotion=!1,visual:()=>docs.switchToMode("normal").pressKey(keys.ArrowLeft).isInMotion=!1,insert:()=>docs.switchToMode("normal").isInMotion=!1,visualLine:()=>docs.switchToMode("normal").isInMotion=!1},i:{normal:()=>docs.switchToMode("insert"),visual:()=>docs.switchToMode("insert"),visualLine:()=>docs.switchToMode("insert")},k:{normal:()=>docs.pressKey(keys.ArrowUp),visual:()=>docs.pressKey(keys.ArrowUp),visualLine:()=>docs.pressKey(keys.ArrowUp,!1,!0)?.selectLine()},j:{normal:()=>docs.pressKey(keys.ArrowDown),visual:()=>docs.pressKey(keys.ArrowDown),visualLine:()=>docs.pressKey(keys.ArrowDown,!1,!0)?.selectLine()},l:{normal:()=>docs.pressKey(keys.ArrowRight),visual:()=>docs.pressKey(keys.ArrowRight),visualLine:()=>docs.pressKey(keys.ArrowRight,!1,!0)?.selectLine()},h:{normal:()=>docs.pressKey(keys.ArrowLeft),visual:()=>docs.pressKey(keys.ArrowLeft),visualLine:()=>docs.pressKey(keys.ArrowLeft,!1,!0)?.selectLine()},w:{normal:()=>docs.pressKey(keys.ArrowRight,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0),visualLine:()=>docs.pressKey(keys.ArrowRight,!0)?.selectLine()},e:{normal:()=>docs.pressKey(keys.ArrowRight,!0),visual:()=>docs.pressKey(keys.ArrowRight,!0)},b:{normal:()=>docs.pressKey(keys.ArrowLeft,!0),visual:()=>docs.pressKey(keys.ArrowLeft,!0)},a:{normal:()=>docs.pressKey(keys.ArrowRight)?.switchToMode("insert"),visual:()=>docs.pressKey(keys.ArrowRight)?.switchToMode("insert")},v:{normal:()=>docs.pressKey(keys.shift)?.switchToMode("visual")},V:{normal:()=>docs.pressKey(keys.home)?.pressKey(keys.shift)?.pressKey(keys.end,!1,!0)?.switchToMode("visualLine")},x:{normal:()=>docs.pressKey(keys.delete,!1,!1),visual:()=>docs.pressKey(keys.delete,!1,!1),visulLine:()=>docs.pressKey(keys.delete,!1,!1)},u:{normal:()=>docs.pressKey(keys.z,!0)?.switchToMode("normal").pressKey(keys.ArrowRight),visual:()=>docs.pressKey(keys.z,!0)?.switchToMode("normal").pressKey(keys.ArrowRight)},d:{normal:()=>mode.isInMotion=!0,visual:()=>docs.pressKey(keys.delete,!1,!1)?.switchToMode("normal"),visualLine:()=>(console.log("d"),docs.pressKey(keys.delete,!1,!1)?.switchToMode("normal"))},D:{normal:()=>docs?.pressKey(keys.end,!1,!0)?.pressKey(keys.delete)},c:{normal:()=>mode.isInMotion=!0,visual:()=>docs.pressKey(keys.delete,!1,!1)?.switchToMode("insert")},$:{normal:()=>docs.pressKey(keys.end),visual:()=>docs.pressKey(keys.end)},0:{normal:()=>{isNaN(mode.number)||1===mode.number&&0!==docs.keyArray.length?docs.pressKey(keys.home):(console.log("0 is pressed and num is not nan",mode.number),console.log("after",mode.number))},visual:()=>docs.pressKey(keys.home)},"^":{normal:()=>docs.pressKey(keys.home),visual:()=>docs.pressKey(keys.home)},g:{normal:()=>mode.isInMotion=!0,visual:()=>mode.isInMotion=!0},G:{normal:()=>docs.pressKey(keys.end,!0),visual:()=>docs.pressKey(keys.end,!0)},y:{normal:()=>mode.isInMotion=!0,visual:()=>docs.copyText()?.stopSelecting()?.switchToMode("normal"),visualLine:()=>docs.copyText()?.stopSelecting()?.switchToMode("normal")},p:{normal:()=>{docs.pressKey(keys.end)?.pressKey(keys.enter)?.pasteText()}},o:{normal:()=>docs.pressKey(keys.end)?.pressKey(keys.enter)?.switchToMode("insert")},O:{normal:()=>docs.pressKey(keys.end)?.pressKey(keys.ArrowUp)?.pressKey(keys.enter)?.switchToMode("insert")},Backspace:{normal:()=>docs.pressKey(keys.ArrowLeft),visual:()=>docs.pressKey(keys.ArrowLeft)}};

statusLine.initStatusLine();